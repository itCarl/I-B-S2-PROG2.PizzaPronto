import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertNotEquals;import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.time.LocalDate;import java.time.LocalDateTime;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.Test;import de.thb.pizzapronto.valueobjects.*;import de.thb.pizzapronto.logic.*;/** * DishVO, PastaVO, PizzaVO and Dessert are tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 04.03.2019 */public class JUnitTestDishesMenu {		private static Class<MenuVO> myMenuClass;	private static Field NUMBER_OF_DISHES;	private static int modifiersNUMBER_OF_DISHES;	private static Field dishes;	private static Method initMenu;	private static int modifiersInitMenu;				@BeforeAll	public static void initOnce() throws NoSuchFieldException, SecurityException, NoSuchMethodException{				myMenuClass = MenuVO.class;		NUMBER_OF_DISHES = myMenuClass.getDeclaredField("NUMBER_OF_DISHES");		modifiersNUMBER_OF_DISHES = NUMBER_OF_DISHES.getModifiers();				dishes = myMenuClass.getDeclaredField("dishes");				initMenu = myMenuClass.getDeclaredMethod("initMenu");		modifiersInitMenu = initMenu.getModifiers();	}		@Test	public void testMenuVOInitMenuIsPrivate() throws NoSuchMethodException {		 assertTrue(Modifier.isPrivate(modifiersInitMenu), "Methode initMenu of menuVO is private");	}		@Test	public void testMenuVONUMBER_OF_DISHESIsFinal() {			assertTrue(Modifier.isFinal(modifiersNUMBER_OF_DISHES),"NUMBER_OF_DISHES in MenuVO is constant");	}		@Test	public void testMenuVONUMBER_OF_DISHESIsStatic() {			assertTrue( Modifier.isStatic(modifiersNUMBER_OF_DISHES),"NUMBER_OF_DISHES in MenuVO is class variable");	}		@Test	public void testMenuVONUMBER_OF_DISHESIsPrivate() {			assertTrue( Modifier.isPrivate(modifiersNUMBER_OF_DISHES),"NUMBER_OF_DISHES in MenuVO is private");	}			@Test	public void testMenuVOGetNUMBER_OF_DISHES_18MenuVO() {		assertEquals( 18,new MenuVO().getNumberOfDishes(),"Methode getNumberOfDishes() in MenuVO is 18");	}		@Test	public void testDishesDataTypeMenuVO() {		assertTrue(dishes.getType().toString().equals("class DishVO"),"dishes in MenuVO is an array und of type DishVO");	}		@Test	public void testMenuVOgetDish() {		MenuVO menu = new MenuVO();		for(int i = 0; i < MenuVO.getNumberOfDishes();i++)		assertNotNull(menu.getDish(i),"All dishes initialized");	}		@Test	public void testDishVOIngredientsToString() {		String name =  "Popeye";		DishVO pizza = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		assertTrue(((DishVO)pizza).ingredientsToString().contains("Schinken, Spinat, Champignon, Ei"),"DishVO implements ingredientsToString() correctly");	}		@Test	public void testDishVOIngredientsToStringNull() {		String name =  "Popeye";		DishVO pizza = new PizzaVO(30, name, null, 8.90f, 1);		System.out.println(pizza.ingredientsToString());		assertTrue(((DishVO)pizza).ingredientsToString().contains(""),"DishVO implements ingredientsToString() correctly");	}		@Test	public void testDishVOToString() {		String name =  "Popeye";		DishVO pizza = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		assertTrue(((DishVO)pizza).toString().contains(pizza.getNameOfDish()),"DishVO toString() ruft getNameOfDish() auf.");	}		@Test	public void testPizzaVONumber() {		int number = 30;		PizzaVO pizza = new PizzaVO(number, "Popeye", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 2);		assertEquals(number,pizza.getNumber(),"Number of pizza");	}		@Test	public void testPizzaVOSize1() {		int size = 1;		PizzaVO pizza = new PizzaVO(30, "Popeye", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, size);		assertEquals( size,pizza.getSize(),"Size of pizza");	}		@Test	public void testPizzaVOSize2() {		int size = 2;		PizzaVO pizza = new PizzaVO(30, "Popeye", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, size);		assertEquals( size,pizza.getSize(),"Size of pizza");	}		@Test	public void testPizzaVONumberOfDishSize1() {		int number = 30;		int size = 1;		int numberOfDish = number * 10 + size;		PizzaVO pizza = new PizzaVO(number, "Popeye", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, size);		assertEquals( numberOfDish,pizza.getNumberOfDish(),"Number of dish in Pizza");	}		@Test	public void testPizzaVONumberOfDishSize2() {		int number = 31;		int size = 2;		int numberOfDish = number * 10 + size;		PizzaVO pizza = new PizzaVO(number, "Popeye", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, size);		assertEquals( numberOfDish,pizza.getNumberOfDish(),"Number of dish in Pizza");	}		@Test	public void testPizzaVOName() {		String name =  "Popeye";		PizzaVO pizza = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 2);		assertEquals(name,pizza.getName(),"Name of Pizza");	}		@Test	public void testPizzaVONameOfDishGrande() {		String name =  "Popeye";		PizzaVO pizza = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 2);		assertTrue(pizza.getNameOfDish().contains(name),"Dish name of pizza contains correct name");		assertTrue(pizza.getNameOfDish().contains("Grande"),"Dish name of pizza contains grande");		assertTrue(pizza.getNameOfDish().contains("Pizza"),"Dish name of pizza contains Pizza");	}		@Test	public void testPizzaVONameOfDishNormal() {		String name =  "Popeye";		PizzaVO pizza = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		assertTrue(pizza.getNameOfDish().contains(name),"Dish name of pizza contains correct name");		assertTrue(pizza.getNameOfDish().contains("Normal"),"Dish name of pizza contains normal");		assertTrue(pizza.getNameOfDish().contains("Pizza"),"Dish name of pizza contains Pizza");	}			@Test	public void testPizzaVOEquals() {		String name =  "Popeye";		PizzaVO pizza1 = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		PizzaVO pizza2 = new PizzaVO(30, name, new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);				assertEquals(pizza1,pizza2,"equals ist ok ");				 pizza2 = new PizzaVO(30, "Anders", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, 8.90f, 1);		assertNotEquals(pizza1,pizza2,"equals  calls equals of DishVO");			}			@Test	public void testPastaVONumber() {		int number = 12;		PastaVO pasta =new PastaVO(number, "Bolognese",				new String[] { "Hackfleischsauce" }, 6.40f, 4);		assertEquals(number,pasta.getNumber(),"Number of dish in Pasta");	}		@Test	public void testPastaVOType4() {		int type = 4;		PastaVO pasta =new PastaVO(12, "Bolognese",				new String[] { "Hackfleischsauce" }, 6.40f, type);		assertEquals(type,pasta.getTypeOfPasta(), "Type of dish in Pasta");	}		@Test	public void testPastaVOType5() {		int type = 5;		PastaVO pasta =new PastaVO(12, "Bolognese",				new String[] { "Hackfleischsauce" }, 6.40f, type);		assertEquals(type,pasta.getTypeOfPasta(), "Type of dish in Pasta");	}		@Test	public void testPastaVOType6() {		int type = 6;		PastaVO pasta =new PastaVO(12, "Bolognese",				new String[] { "Hackfleischsauce" }, 6.40f, type);		assertEquals(type,pasta.getTypeOfPasta(), "Type of dish in Pasta");	}		@Test	public void testPastaVONumberOfDish() {		int number = 12;		int type = 4;		int numberOfDish = type * 100 + number;		PastaVO pasta =new PastaVO(number, "Bolognese",				new String[] { "Hackfleischsauce" }, 6.40f, type);		assertEquals(numberOfDish,pasta.getNumberOfDish(),"Number of dish in Pasta");	}		@Test	public void testPastaVOName() {		String name =  "Bolognese";		PastaVO pasta =new PastaVO(12, name,				new String[] { "Hackfleischsauce" }, 6.40f, 4);		assertEquals(name,pasta.getName(),"Name of Pizza");	}		@Test	public void testPastaVONameOfDish4() {		String name =  "Bolognese";		PastaVO pasta =new PastaVO(12, name,				new String[] { "Hackfleischsauce" }, 6.40f, 4);		assertTrue(pasta.getNameOfDish().contains(name),"Dish name of pasta contains correct name");		assertTrue(pasta.getNameOfDish().contains("Spaghetti"),"Dish name of pasta contains Spaghetti");		assertTrue(pasta.getNameOfDish().contains("Pasta"),"Dish name of pasta contains Pasta");	}		@Test	public void testPastaVONameOfDish5() {		String name =  "Bolognese";		PastaVO pasta =new PastaVO(12, name,				new String[] { "Hackfleischsauce" }, 6.40f, 5);		assertTrue(pasta.getNameOfDish().contains(name),"Dish name of pasta contains correct name");		assertTrue(pasta.getNameOfDish().contains("Tortellini"),"Dish name of pasta contains Tortellini");		assertTrue(pasta.getNameOfDish().contains("Pasta"),"Dish name of pasta contains Pasta");	}		@Test	public void testPastaVONameOfDish6() {		String name =  "Bolognese";		PastaVO pasta =new PastaVO(12, name,				new String[] { "Hackfleischsauce" }, 6.40f, 6);		assertTrue(pasta.getNameOfDish().contains(name),"Dish name of pasta contains correct name");		assertTrue(pasta.getNameOfDish().contains("Gnocchi"),"Dish name of pasta contains Gnocchi");		assertTrue(pasta.getNameOfDish().contains("Pasta"),"Dish name of pasta contains Pasta");	}		@Test	public void testPastaVONameOfDish7() {		String name =  "Bolognese";		PastaVO pasta =new PastaVO(12, name,				new String[] { "Hackfleischsauce" }, 6.40f, 7);		assertTrue(pasta.getNameOfDish().contains(name),"Dish name of pasta contains correct name");		assertFalse(pasta.getNameOfDish().contains("Gnocchi"),"Dish name of pasta contains Gnocchi");		assertFalse(pasta.getNameOfDish().contains("Spaghetti"),"Dish name of pasta contains Spaghetti");		assertFalse(pasta.getNameOfDish().contains("Tortellini"),"Dish name of pasta contains Tortellini");		assertTrue(pasta.getNameOfDish().contains("Pasta"),"Dish name of pasta contains Pasta");	}		@Test	public void testDessertVONumber() {		int number = 12;		DessertVO dessert = new DessertVO(number, "Hausgemachter Obstsalat", 2.30f);		assertEquals(number,dessert.getNumber(),"Nubmer of dessert");	}				@Test	public void testDessertVONumberOfDish() {		DessertVO dessert = new DessertVO(21, "Hausgemachter Obstsalat", 2.30f);		assertEquals(dessert.getNumber(), dessert.getNumberOfDish(),"Dish number of dessert is identical to its number");	}		@Test	public void testDessertVOName() {		String name =  "Hausgemachter Obstsalat";		DessertVO dessert = new DessertVO(21, name, 2.30f);		assertEquals( name,dessert.getName(), "Name of dessert");	}		@Test	public void testDessertVONameOfDish() {		String name =  "Hausgemachter Obstsalat";		DessertVO dessert = new DessertVO(21, name, 2.30f);		assertTrue(dessert.getNameOfDish().contains(name),"dish name of dessert is identical to its name");	}	}