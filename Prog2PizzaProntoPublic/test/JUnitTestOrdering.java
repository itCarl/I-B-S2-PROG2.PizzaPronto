import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.junit.jupiter.api.Assertions.assertNull;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import java.io.ByteArrayOutputStream;import java.io.PrintStream;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.time.LocalDate;import java.time.LocalDateTime;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import de.thb.pizzapronto.valueobjects.*;import de.thb.pizzapronto.logic.*;/** * EmployeeVO and work are tested. *  * Requirement: OrderVO and menuVO are ok *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 03.04.2019 */public class JUnitTestOrdering {	private static Class<Ordering> myOrderingClass;	private static OrderVO myOrder;	private static OrderVO myOrderWithoutCustomer;	private static Ordering myOrdering;	private static IService[] services = new IService[2];	private static CustomerVO customer;		private static Field nextId;	private static int modifiersNextId;		private static Field menu;	private static int modifiersMenu;			private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();	private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();	private final PrintStream originalOut = System.out;	private final PrintStream originalErr = System.err;		@BeforeEach	public void initEach() throws NoSuchFieldException, NoSuchMethodException, SecurityException {		int year, number;		// create chef		services[0] = new Kitchen();		// create delivery man		services[1] = new Delivery();		// create customer		customer = new CustomerVO("Genuss", "Gini", "Haribostra√üe", 32, "weiblich", LocalDate.of(1995, 8, 8));		// create order		year = LocalDate.now().getYear();		number = year * 100000 + 1;		myOrder = new OrderVO(number, "started", LocalDateTime.now(), customer);		customer.setOrder(myOrder);		myOrderWithoutCustomer = new OrderVO(number, "started", LocalDateTime.now(), null);		myOrdering = new Ordering();			}	// Ordering		@Test	public void testOrderingCreateMenu()  {		assertNotNull(Ordering.getMenu(), "Attribut menu of Ordering is not null");;			}		public void testOrderingMenu() throws NoSuchFieldException, SecurityException {		myOrderingClass = Ordering.class;		menu = myOrderingClass.getDeclaredField("menu");		modifiersMenu = menu.getModifiers();		assertTrue(Modifier.isPrivate(modifiersMenu), "Attribut menu of Ordering is private");		assertTrue(Modifier.isStatic(modifiersMenu), "Attribut menu of Ordering is static");	}	@Test	public void testOrderingNextId() throws NoSuchFieldException, SecurityException {		myOrderingClass = Ordering.class;		nextId = myOrderingClass.getDeclaredField("nextId");		modifiersNextId = nextId.getModifiers();		assertTrue(Modifier.isPrivate(modifiersNextId), "Attribut nextId of Ordering is private");		assertTrue(Modifier.isStatic(modifiersNextId), "Attribut nextId of Ordering is static");	}	@Test	public void testOrderingNextId0() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {		int id = 0;		Ordering myOrderingId = new Ordering();		myOrderingClass = Ordering.class;		nextId = myOrderingClass.getDeclaredField("nextId");		nextId.setAccessible(true);		nextId.set(0, 0);		assertTrue(id == Ordering.getNextId(), "NexID is 0");		myOrderingId.startNewOrder(customer);		id = LocalDateTime.now().getYear() * 100000 + 1;		assertTrue(id == myOrderingId.getCurrentOrder().getOrderNo(), "OderNo of currentOrder is correct");		assertTrue(id == Ordering.getNextId(), "NextId of Ordering is correct");			}	@Test	public void testOrderingNextIdIncrement() throws NoSuchFieldException, SecurityException {		int id;		Ordering myOrderingId = new Ordering();		id = Ordering.getNextId();		for (int i = 0; i < 20; i++) {			myOrderingId.startNewOrder(customer);			id++;			assertTrue(id == Ordering.getNextId(), "NextId of Ordering is correct");		}	}		@Test	public void testOrderingKonstruktor() {				OrderVO order;		CustomerVO customer;				IService services [] = new IService[2];		myOrdering = new Ordering();				order = myOrdering.getCurrentOrder();		assertNull(order,"Order is null");				customer = myOrdering.getCurrentCustomer();		assertNull(customer,"Customer is null");				services[0] = myOrdering.getKitchen();		assertNotNull(services[0],"Kitchen is not null");				services[1] = myOrdering.getDelivery();		assertNotNull(services[1],"Delivery is not null");			}		@Test	public void testOrderingStartNewOrder() {				OrderVO order;			order = myOrdering.startNewOrder(customer);		assertNotNull(order,"return value  is not null");		assertTrue(order.equals(myOrdering.getCurrentOrder()), "CurrentOrder is set and matches the return value. ");		assertTrue(customer.equals(myOrdering.getCurrentCustomer()), "CurrentCustomer is set and matches the parameter. ");		assertTrue(order.equals(myOrdering.getCurrentCustomer().getOrder()), "Order in customer is set and the order. ");		assertTrue(order.getState().equals("started"), "State of order  is started. ");			}		@Test	public void testOrderingStartNewOrderWithNoCustomer() {				OrderVO order;		order = myOrdering.startNewOrder(null);		assertNull(order,"Order is null");	}	@Test	public void testOrderingNextIdNewYear()			throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {		int id;		Ordering myOrderingId = new Ordering();		myOrderingClass = Ordering.class;		nextId = myOrderingClass.getDeclaredField("nextId");		nextId.setAccessible(true);		nextId.set((LocalDateTime.now().getYear() - 1) * 100000 + 1, (LocalDateTime.now().getYear() - 1) * 100000 + 1);				myOrderingId.startNewOrder(customer);		id = LocalDateTime.now().getYear() * 100000 + 1;		assertTrue(id == myOrderingId.getCurrentOrder().getOrderNo(), "OderNo of currentOrder is correct");		assertTrue(id == Ordering.getNextId(), "NextId of Ordering is correct");	}			@Test	public void testOrderingAddDishWithNoOrder(){	    System.setOut(new PrintStream(outContent));	    System.setErr(new PrintStream(errContent));					myOrdering.setCurrentOrder(null);		myOrdering.addDish(new DessertVO());		assertTrue(outContent.toString().contains("Error: There is no order."), "Error: There is no order.");	   System.setOut(originalOut);	   System.setErr(originalErr);	}		@Test	public void testOrderingAddDish(){	   		DishVO dish = new DessertVO();		OrderVO order;			order = myOrdering.startNewOrder(customer);		myOrdering.addDish(dish);		assertEquals(dish, order.getDish(0),"Dish is added");	}		@Test	public void testOrderingAddDishStateConfirmed(){		 System.setOut(new PrintStream(outContent));		    System.setErr(new PrintStream(errContent));	   		DishVO dish = new DessertVO();		OrderVO order;			order = myOrdering.startNewOrder(customer);		order.setState("confirmed");		myOrdering.addDish(dish);		assertTrue(outContent.toString().contains("Your order is complete, you can not add any dishes."), "Your order is complete, you can not add any dishes.");		   System.setOut(originalOut);		   System.setErr(originalErr);	}		@Test	public void testOrderingAddDishStateReady(){		 System.setOut(new PrintStream(outContent));		    System.setErr(new PrintStream(errContent));	   		DishVO dish = new DessertVO();		OrderVO order;			order = myOrdering.startNewOrder(customer);		order.setState("ready");		myOrdering.addDish(dish);		assertTrue(outContent.toString().contains("Your order is complete, you can not add any dishes."), "Your order is complete, you can not add any dishes.");		   System.setOut(originalOut);		   System.setErr(originalErr);	}		@Test	public void testOrderingAddDishStateDelivered(){		 System.setOut(new PrintStream(outContent));		    System.setErr(new PrintStream(errContent));	   		DishVO dish = new DessertVO();		OrderVO order;			order = myOrdering.startNewOrder(customer);		order.setState("delivered");		myOrdering.addDish(dish);		assertTrue(outContent.toString().contains("Your order is complete, you can not add any dishes."), "Your order is complete, you can not add any dishes.");		   System.setOut(originalOut);		   System.setErr(originalErr);	}		@Test	public void testOrderingAddDishStateFinished(){		 System.setOut(new PrintStream(outContent));		    System.setErr(new PrintStream(errContent));	   		DishVO dish = new DessertVO();		OrderVO order;			order = myOrdering.startNewOrder(customer);		order.setState("finished");		myOrdering.addDish(dish);		assertTrue(outContent.toString().contains("Your order is complete, you can not add any dishes."), "Your order is complete, you can not add any dishes.");		   System.setOut(originalOut);		   System.setErr(originalErr);	}		@Test	public void testOrderingAddDishNull(){	   		DishVO dish = null;		OrderVO order;			order = myOrdering.startNewOrder(customer);		myOrdering.addDish(dish);		assertEquals(dish, order.getDish(0),"Dish is added");	}		@Test	public void testOrderingDeleteDishWithNoOrder(){	    System.setOut(new PrintStream(outContent));	    System.setErr(new PrintStream(errContent));					myOrdering.setCurrentOrder(null);		myOrdering.deleteDish();		assertTrue(outContent.toString().contains("Error: There is no order."), "Error: There is no order.");	   System.setOut(originalOut);	   System.setErr(originalErr);	}		@Test	public void testOrderingDeleteDish(){	   		DishVO dish = new DessertVO();		OrderVO order;			order = myOrdering.startNewOrder(customer);		myOrdering.addDish(dish);		assertEquals(dish, order.getDish(0),"Dish is added");		myOrdering.deleteDish();		assertEquals(0, order.getNumberOfDishes(),"Dish is delete. There are no more dishes");	}		@Test	public void testOrderingDeleteDishStateConfirmed(){		 System.setOut(new PrintStream(outContent));		    System.setErr(new PrintStream(errContent));	   		OrderVO order;			order = myOrdering.startNewOrder(customer);		order.setState("confirmed");		myOrdering.deleteDish();		assertTrue(outContent.toString().contains("Your order is complete, you can not delete any dishes."), "Your order is complete, you can not delete any dishes.");		   System.setOut(originalOut);		   System.setErr(originalErr);	}	@Test	public void testOrderingConfirmOrder(){		OrderVO order;		order = myOrdering.startNewOrder(customer);		myOrdering.confirmOrder();		assertEquals("finished",order.getState(), "State of order is finished, since service ws started.");  	}	public void testOrderingConfirmOrderTextAmEnde(){				System.setOut(new PrintStream(outContent));	    System.setErr(new PrintStream(errContent));				myOrdering.confirmOrder();		assertTrue(outContent.toString().contains("Order completed: "), "Order completed: ");		 System.setOut(originalOut);		   System.setErr(originalErr);	}		@Test	public void testOrderingConfirmOrderNull(){	    System.setOut(new PrintStream(outContent));	    System.setErr(new PrintStream(errContent));					myOrdering.setCurrentOrder(null);		myOrdering.confirmOrder();		assertTrue(outContent.toString().contains("Error: There is no order."), "Error: There is no order.");	   System.setOut(originalOut);	   System.setErr(originalErr);	}				@Test	public void testOrderingStartServiceOrderNULL(){	    System.setOut(new PrintStream(outContent));	    System.setErr(new PrintStream(errContent));					myOrdering.setCurrentOrder(null);				myOrdering.startService();		assertTrue(outContent.toString().contains("Error: There is no order."), "Error: There is no order.");	   System.setOut(originalOut);	   System.setErr(originalErr);	}		@Test	public void testOrderingStartServiceStateStarted(){	   		System.setOut(new PrintStream(outContent));	    System.setErr(new PrintStream(errContent));				    myOrdering.startNewOrder(customer);		myOrdering.startService();		assertTrue(outContent.toString().contains("Your order can not be processed."), "Your order can not be processed.");	   System.setOut(originalOut);	   System.setErr(originalErr);	}		@Test	public void testOrderingCalculateTotalPriceOrderNull(){	    System.setOut(new PrintStream(outContent));	    System.setErr(new PrintStream(errContent));					myOrdering.setCurrentOrder(null);		myOrdering.calculateTotalPrice();		assertTrue(outContent.toString().contains("Error: There is no order."), "Error: There is no order.");	   System.setOut(originalOut);	   System.setErr(originalErr);	}		@Test	public void testOrderingCalculateTotalPriceOrderNoDish(){		float price;					myOrdering.startNewOrder(customer);			price = myOrdering.calculateTotalPrice();			assertTrue(0.0f == price, "Price is 0.");	}		@Test	public void testOrderingCalculateTotalPriceOrderStateConfirmed() {		float price;		OrderVO order;		order = myOrdering.startNewOrder(customer);		order.setState("confirmed");		price = myOrdering.calculateTotalPrice();		assertTrue(0.0f == price, "Price is 0.");	}		@Test	public void testOrderingCalculateTotalPrice() {		float priceIni =  7.65f;		float price;		OrderVO order;		DishVO dish = new PizzaVO(30, "Popeye", new String[] { "Schinken",				"Spinat", "Champignon", "Ei" }, priceIni, 1);		order = myOrdering.startNewOrder(customer);		myOrdering.addDish(dish);		price = myOrdering.calculateTotalPrice();		assertTrue(priceIni == price, "Total price is ok.");		order.setState("confirmed");		price = myOrdering.calculateTotalPrice();		assertTrue(priceIni == price, "Total price is ok.");	}			@Test	public void testOrderingConfirmOrderWrongState(){	    System.setOut(new PrintStream(outContent));	    System.setErr(new PrintStream(errContent));					myOrdering.setCurrentOrder(null);				myOrdering.confirmOrder();		assertTrue(outContent.toString().contains("Error: There is no order."), "Error: There is no order.");	   System.setOut(originalOut);	   System.setErr(originalErr);	}}