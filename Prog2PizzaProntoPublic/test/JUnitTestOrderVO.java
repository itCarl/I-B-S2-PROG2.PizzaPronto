import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Field;import java.lang.reflect.Modifier;import java.time.LocalDate;import java.time.LocalDateTime;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import de.thb.pizzapronto.valueobjects.*;import de.thb.pizzapronto.logic.*;/** * EmployeeVO and work are tested. *  * Requirement: OrderVO and menuVO are ok *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 03.04.2019 */public class JUnitTestOrderVO {	private static Class<OrderVO> myOrderClass;	private static OrderVO myOrder;		private static IService[] services = new IService[2];	private static CustomerVO customer;	private static MenuVO menuVO;	private static Field shoppingBasket;		private static Field MAXDISHED;		private static int modifiersMAXDISHED;		@BeforeEach	public void initEach() throws NoSuchFieldException {		int year, number;		// create chef		services[0] = new Kitchen();		// create delivery man		services[1] = new Delivery();		// create customer		customer = new CustomerVO("Genuss", "Gini", "Haribostraße", 32, "weiblich", LocalDate.of(1995, 8, 8));		// create order		year = LocalDate.now().getYear();		number = year * 100000 + 1;		myOrder = new OrderVO(number, "started", LocalDateTime.now(), customer);		customer.setOrder(myOrder);		menuVO = new MenuVO();		myOrderClass = OrderVO.class;		shoppingBasket = myOrderClass.getDeclaredField("shoppingBasket");				MAXDISHED = myOrderClass.getDeclaredField("MAX_DISHES");		modifiersMAXDISHED = MAXDISHED.getModifiers();	}	// OrderVO		@Test	public void testOrderVOMAX_DISHESIsPrivate() {		assertTrue( Modifier.isPrivate(modifiersMAXDISHED),"MAX_DISHES is private" );	}		@Test	public void testOrderVOMAX_DISHESIsFinal() {		assertTrue( Modifier.isFinal(modifiersMAXDISHED),"MAX_DISHES is final" );	}	@Test	public void testOrderVOShoppingBasketDataType() {		assertTrue(shoppingBasket.getType().toString().equals("class DishVO"),				"shoppingBasket in OrderVO is an array of type DishVO");	}	@Test	public void testOrderVOShoppingBasketNotFull() {		myOrder.addDish(menuVO.getDish(0));		myOrder.setTimestampDeliveredOrder(LocalDateTime.now());		String s = myOrder.toString();		assertFalse(s.contains("null"), "ToString() does not contains empty elements of shopping baskets, i.e. null.");	}	@Test	public void testOrderVOStateConfirmed() {		assertEquals("started", myOrder.getState(), "state in OrderVO is started after starting");	}	@Test	public void testOrderVONumber() {		int test = myOrder.getOrderNo();		String s = Integer.toString(test);		String year = Integer.toString(LocalDate.now().getYear());		assertTrue(s.contains(year), "Correc year is part of the identifier");	}	@Test	public void testOrderVOAddDish() {		// add a dish from MenuVO		myOrder.addDish(menuVO.getDish(0));		assertEquals(1, myOrder.getNumberOfDishes(), "Number of dishes in OrderVO: 1");	}		@Test	public void testOrderVOSetGetShoppingBasketDishVO() {		DishVO [] dishes = new DishVO[2];		// add a dish from MenuVO		dishes[0] = menuVO.getDish(0);		dishes[1] = menuVO.getDish(1);		myOrder.setShoppingBasket(dishes);		assertEquals(dishes,myOrder.getShoppingBasket(),"Setter and Getter use DishVO[]");	}	@Test	public void testOrderVOAddToManyDishes() {		// add all 18 dishes of menuVO		for (int i = 0; i < OrderVO.getMAX_DISHES(); i++) {			myOrder.addDish(menuVO.getDish(i % menuVO.getNumberOfDishes()));		}		assertEquals(OrderVO.getMAX_DISHES(), myOrder.getNumberOfDishes(), "Number of dishes in OrderVO: MAX_GERICHTE");		// add one more dish of menuVO		myOrder.addDish(menuVO.getDish(0));		assertEquals(				myOrder.getNumberOfDishes(), myOrder.getIndex(), "Index in OrderVO equals  Number of dishes");	}	@Test	public void testOrderVOAddAllDishes() {		// add all 18 dishes of menuVO		for (int i = 0; i < menuVO.getNumberOfDishes(); i++) {			myOrder.addDish(menuVO.getDish(i));		}		assertEquals(OrderVO.getMAX_DISHES(), myOrder.getNumberOfDishes(), "Number of dishes in OrderVO: MAX_GERICHTE");		for (int i = 0; i < myOrder.getNumberOfDishes(); i++) {			assertEquals(					myOrder.getDish(i), menuVO.getDish(i), "Dishes in OrderVO equal the dishes of MenuVO");		}	}	@Test	public void testOrderVOEqualsMethod() {		OrderVO otherOrder = myOrder; // Identität		// add all 18 dishes of menuVO		for (int i = 0; i < menuVO.getNumberOfDishes(); i++) {			myOrder.addDish(menuVO.getDish(i));			otherOrder.addDish(menuVO.getDish(i));		}		assertEquals(myOrder, otherOrder, " OrderVO equals new OrderVO");	}	@Test	public void testOrderVOCalculateTotalPrice() {		float price = 7.00f;		// add dishes		for (int i = 0; i < OrderVO.getMAX_DISHES(); i++) {			myOrder.addDish(					new PizzaVO(30, "Popeye", new String[] { "Schinken", "Spinat", "Champignon", "Ei" }, price, 1));		}		assertTrue((price * OrderVO.getMAX_DISHES()) == myOrder.calculatePriceDishes(),				" price is calculated correctly ");	}	@Test	public void testOrderVODeleteDish() {		int index;		index = myOrder.getIndex();		myOrder.addDish(menuVO.getDish(0));		myOrder.deleteDish();		assertEquals(index, myOrder.getIndex(), "after method call deleteDish() in OrderVO index is decreased");	}	@Test	public void testOrderVODeleteLastDishOnceToMuch() {		int index;		index = myOrder.getIndex();		assertEquals(index, 0, " Index is 0");		myOrder.deleteDish();		assertEquals(				index, myOrder.getIndex(), "Delete last dish once too much but index remains 0");	}	@Test	public void testOrderVOAddAndDeleteLastDish() {		int index;		index = myOrder.getIndex();		assertEquals(index, 0, " Index is 0");		myOrder.addDish(menuVO.getDish(0));		myOrder.deleteDish();		assertEquals(				index, myOrder.getIndex(), "Add and delete dish index is 0 again.");	}	@Test	public void testOrderVOAddAndDeleteLastDishOnceToMuch() {		int index;		index = myOrder.getIndex();		assertEquals(index, 0, " Index is 0");		myOrder.addDish(menuVO.getDish(0));		myOrder.deleteDish();		myOrder.deleteDish();		assertEquals(				index, myOrder.getIndex(), "Delete last dish once too much but index remains 0");	}	@Test	public void testOrderVOGetDish() {		int index;		index = myOrder.getIndex();		assertEquals(index, 0, " Index is 0");		myOrder.addDish(menuVO.getDish(0));		index = myOrder.getIndex();		assertEquals(index, 1, " Index is 1");		assertEquals(				myOrder.getDish(index - 1), menuVO.getDish(0), "Dish at index" + (index - 1) + "is correct.");	}	@Test	public void testOrderVOGetDishWithNoDishAtIndex() {		int index;		index = myOrder.getIndex();		assertEquals(index, 0, " Index is 0");		assertEquals(myOrder.getDish(index), null, "No Dish at index" + index);	}	@Test	public void testOrderVOGetDishWithWrongtIndex() {		assertEquals(myOrder.getDish(10000), null, "Dish at N index" + "is correct.");	}}