import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;import java.awt.Color;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.Test;import de.thb.pizzapronto.valueobjects.*;import de.thb.pizzapronto.logic.*;/** * The Hierarchy of inhertance is tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 04.03.2019 */public class JUnitTestHierarchyOfInheritance {		private static Class<PersonVO> myPersonVOClass;	private static int modifiersPersonVO; 	private static Class<EmployeeVO> myEmployeeClass;	private static int modifiersEmployeeVO; 			private static  EmployeeVO chef;	private static  EmployeeVO deliveryMan;		private static Class<IOrdering> myIOrdering;	private static int modifiersIOrdering; 		private static Class<IService> myIService;	private static int modifiersIService; 	private static  Ordering ordering;	private static  Kitchen kitchen;	private static  Delivery delivery;	private static Class<DishVO> myDishVOClass;	private static int modifiersDishVO; 		private static  DishVO dessert;		private static Method getNameOfDish;	private static int modifiersgetNameOfDish;	private static Method getNumberOfDish;	private static int modifiersgetNumberOfDish;	private static Method getName;	private static int modifiersgetName;	private static Method getNumber;	private static int modifiersgetNumber;		@BeforeAll	public static void initOnce() throws NoSuchFieldException, SecurityException, NoSuchMethodException{			myEmployeeClass = EmployeeVO.class;				myPersonVOClass = PersonVO.class;				modifiersPersonVO = myPersonVOClass.getModifiers();				chef = new ChefVO();		deliveryMan = new DeliveryManVO();					myDishVOClass = DishVO.class;		modifiersDishVO= myDishVOClass .getModifiers();						modifiersEmployeeVO= EmployeeVO.class.getModifiers();				dessert = new DessertVO();				getNameOfDish = myDishVOClass.getMethod( "getNameOfDish" );		modifiersgetNameOfDish = getNameOfDish.getModifiers();				getNumberOfDish = myDishVOClass.getMethod( "getNumberOfDish" );		modifiersgetNumberOfDish = getNumberOfDish.getModifiers();				getName = myDishVOClass.getMethod( "getName" );		modifiersgetName = getName.getModifiers();				getNumber = myDishVOClass.getMethod( "getNumber" );		modifiersgetNumber = getNumber.getModifiers();				myIOrdering = IOrdering.class;		modifiersIOrdering= myIOrdering.getModifiers();				ordering = new Ordering();				myIService = IService.class;		modifiersIService= myIService.getModifiers();				kitchen = new Kitchen();		delivery = new Delivery();			}		@Test	public void testPersonVOIsAbstract() {		assertTrue( Modifier.isAbstract(modifiersPersonVO),"PersonVO is abstract");	}			@Test	public void testEmployeeSuperClassPersonVO() {		assertTrue(myEmployeeClass.getSuperclass().toString().equals("class PersonVO"),"EmployeeVO is a PersonVO");	}			@Test	public void testChefVOSuperClass() {		assertTrue( chef instanceof ChefVO, "ChefVO is a ChefVO");		assertTrue( chef instanceof EmployeeVO,"ChefVO is a  EmployeeVO");		assertTrue( chef instanceof PersonVO,"ChefVO is a  PersonVO");	}		@Test	public void testChefVOToString() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		assertEquals(chef.getPersonnelNo(),"Bocuse01", "Personnell number is set.");		assertTrue(chef.toString().contains("Bocuse01"), "ToString contains personnel number.");		assertEquals(chef.getLastName(),"Bocuse", "Last name is set.");		assertEquals(((EmployeeVO)chef).getLastName(),"Bocuse", "Last name is inherited from EmployeeVO.");		assertEquals(((PersonVO)chef).getLastName(),"Bocuse", "Last name is inherited from PersonVO.");		assertTrue(chef.toString().contains("Bocuse"), "ToString contains last name.");		assertEquals(chef.getFirstName(),"Bruno", "First name is set.");		assertEquals(((EmployeeVO)chef).getFirstName(),"Bruno", "First name is inherited from EmployeeVO.");		assertEquals(((PersonVO)chef).getFirstName(),"Bruno", "First name is inherited from PersonVO.");		assertTrue(chef.toString().contains("Bruno"), "ToString contains first name.");			}		@Test	public void testChefVOArpon() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		chef.setColorApron(Color.GREEN);		assertEquals(chef.getColorApron(),Color.GREEN, "Color of Apron has setter and getter.");	}		@Test	public void testChefVOEquals() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		ChefVO chef2 = new ChefVO("Bocuse01", "Bocuse", "Britta");		DeliveryManVO deliveryMan = new DeliveryManVO("Bocuse01", "Lacy", "Lutz");						assertTrue(chef.equals(chef), "Equals is implemented");		assertTrue(chef.equals(chef2), "Equals is implemented, only based on personnel number");		assertTrue(((PersonVO)chef).equals((PersonVO)chef2), "Equals is implemented, only based on personnel number of PersonVO");		assertFalse(chef.equals(deliveryMan), "Equals uses getClass()");		assertFalse(((PersonVO)chef).equals((PersonVO)deliveryMan), "Equals uses getClass()");					}			@Test	public void testDeliveryManVOSuperClass() {		assertTrue( deliveryMan instanceof DeliveryManVO, "DeliveryManVO is a DeliveryManVO");		assertTrue( deliveryMan instanceof EmployeeVO,"DeliveryManVO is a  EmployeeVO");		assertTrue( deliveryMan instanceof PersonVO,"DeliveryManVO is a  PersonVO");	}		@Test	public void testDeliveryManVOToString() {		DeliveryManVO deliveryMan = new DeliveryManVO("Lacy01", "Lacy", "Lutz");		assertEquals(deliveryMan.getPersonnelNo(),"Lacy01", "Personnell number is set.");		assertTrue(deliveryMan.toString().contains("Lacy01"), "ToString contains personnel number.");		assertEquals(deliveryMan.getLastName(),"Lacy", "Last name is set.");		assertEquals(((EmployeeVO)deliveryMan).getLastName(),"Lacy", "Last name is inherited from EmployeeVO.");		assertEquals(((PersonVO)deliveryMan).getLastName(),"Lacy", "Last name is inherited from PersonVO.");		assertTrue(deliveryMan.toString().contains("Lacy"), "ToString contains last name.");		assertEquals(deliveryMan.getFirstName(),"Lutz", "Last name is set.");		assertEquals(((EmployeeVO)deliveryMan).getFirstName(),"Lutz", "First name is inherited from EmployeeVO.");		assertEquals(((PersonVO)deliveryMan).getFirstName(),"Lutz", "First name is inherited from PersonVO.");		assertTrue(deliveryMan.toString().contains("Lutz"), "ToString contains first name.");			}		@Test	public void testDeliveryManVODriverLicence() {		DeliveryManVO deliveryMan = new DeliveryManVO("Lacy01", "Lacy", "Lutz");		deliveryMan.setDriverLicence("DriverLicence A");		assertEquals(deliveryMan.getDriverLicence(),"DriverLicence A", "Driver licence has setter and getter.");	}			@Test	public void testDishVOIsAbstract() {			assertTrue( Modifier.isAbstract(modifiersDishVO),"DishVO is abstract" );	}		@Test	public void testEmployeeVOIsAbstract() {			assertTrue( Modifier.isAbstract(modifiersEmployeeVO),"EmployeeVO is abstract" );	}			@Test	public void testDishVOGetDishNameIsAbstract() {			assertTrue( Modifier.isAbstract(modifiersgetNameOfDish),"Methode getNameOfDish is abstract");	}		@Test	public void testDishVOGetDishNumberIsAbstract() {			assertTrue(Modifier.isAbstract(modifiersgetNumberOfDish),"Methode getNumberOfDish is abstract");	}	@Test	public void testDishVOGetNameIsNotAbstract() {			assertFalse(Modifier.isAbstract(modifiersgetName),"Methode getName isn't abstract");	}		@Test	public void testDishVOGetNumberIsNotAbstract() {			assertFalse( Modifier.isAbstract(modifiersgetNumber),"Methode getNumber isn't  abstract");	}		@Test	public void testDessertVOSuperClass() {		assertTrue( dessert instanceof DessertVO,"DessertVO is a DessertVO");		assertTrue( dessert instanceof DishVO,"DessertVO is a DishVO");	}		@Test	public void testIOrderingisInterface() {			assertTrue( Modifier.isInterface(modifiersIOrdering),"IOrdering is Interface");	}		@Test	public void testIServiceisInterfaceIService() {			assertTrue( Modifier.isInterface(modifiersIService),"IService is Interface");	}		@Test	public void testOrderingHasSuperClassIOrdering() {		assertTrue( ordering instanceof IOrdering,"Ordering is a IOrdering");	}		@Test	public void testKitchenHasSuperClassIService() {		assertTrue( kitchen instanceof IService,"Kitchen is a IService");	}		@Test	public void testDeliveryHasSuperClassIService() {		assertTrue( delivery instanceof IService,"Delivery is a IService");	}	}