import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import org.junit.platform.commons.support.ReflectionSupport;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.time.LocalDate;import java.time.LocalDateTime;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import de.thb.pizzapronto.valueobjects.*;import de.thb.pizzapronto.logic.*;/** * EmployeeVO and work are tested. *  * Requirement: OrderVO and menuVO are ok *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.0 03.04.2019 */public class JUnitTestService {		private static OrderVO myOrder;	private static OrderVO myOrderWithoutCustomer;	private static IService[] services = new IService[2];	private static CustomerVO customer;		private static Class<Delivery> myDeliveryClass;	private static Method selectEmployee;	private static int modifiersSelectEmployee;		@BeforeEach	public void initEach() throws NoSuchFieldException {		int year, number;		// create chef		services[0] = new Kitchen();		// create delivery man		services[1] = new Delivery();		// create customer		customer = new CustomerVO("Genuss", "Gini", "HaribostraÃŸe", 32, "weiblich", LocalDate.of(1995, 8, 8));		// create order		year = LocalDate.now().getYear();		number = year * 100000 + 1;		myOrder = new OrderVO(number, "started", LocalDateTime.now(), customer);		customer.setOrder(myOrder);		myOrderWithoutCustomer = new OrderVO(number, "started", LocalDateTime.now(), null);	}	// Services	@Test	public void testKitchenWithOrderConfirmedWithCustomer() {		String test;		myOrder.setState("confirmed");		test = services[0].startService(myOrder);		assertTrue(test.contains("Order is ready."), "Kitchen: Order is ready.");		assertEquals("ready", myOrder.getState(), "state of order changed to redy");	}	@Test	public void testKitchenWithOrderConfirmedCompleteText() {		myOrder.setState("confirmed");		String personellNumber;		Kitchen k = (Kitchen) services[0];		String s = k.startService(myOrder);		assertTrue(s.contains("Order is ready."), "Order is ready.");		assertTrue(s.contains("Service of ChefVO"), "Service of ChefVO");		personellNumber = (k.getEmployees())[0].getPersonnelNo();		assertTrue(s.contains(personellNumber), "Service of ChefVO with personell number");		assertEquals("ready", myOrder.getState(), "state of order is ready");			}	@Test	public void testKitchenWithoutCustomer() {		myOrderWithoutCustomer.setState("confirmed");		assertTrue(services[0].startService(myOrderWithoutCustomer).contains("Order is ready."), "Order is ready.");		assertEquals("ready", myOrderWithoutCustomer.getState(), "state of order is ready");	}	@Test	public void testKitchenWithOrderStarted() {		String test;		test = services[0].startService(myOrder);		assertTrue(test.contains("No order for processing available."), "Kitchen: No order for processing available.");		assertEquals("started", myOrder.getState(), "state of order remains started");	}	@Test	public void testKitchenWithoutOrder() {		String test;		test = services[0].startService(null);		assertTrue(test.contains("No order available."), "Kitchen: No order available.");		assertEquals("started", myOrder.getState(), "state of order remains started");	}	@Test	public void testKitchenWithOrderStartedWithoutCustomer() {		String test;		String state = myOrderWithoutCustomer.getState();		test = services[1].startService(myOrderWithoutCustomer);		assertTrue(test.contains("No customer available."), "Delivery: No customer available.");		assertEquals(state, myOrderWithoutCustomer.getState(), "state of order remains started");	}	@Test	public void testDeliveryWithOrderReadyWithCustomer() {		String test;		myOrder.setState("ready");		test = services[1].startService(myOrder);		assertTrue(test.contains("Order is delivered on"), "Delivery: Order is delivered on");		assertEquals("delivered", myOrder.getState(), "state of order changed to delivered");	}	@Test	public void testDeliveryWithOrderReadyWithoutCustomer() {		String test;		myOrderWithoutCustomer.setState("ready");		test = services[1].startService(myOrderWithoutCustomer);		assertTrue(test.contains("No customer available."), "Delivery: No customer available.");		assertEquals("ready", myOrderWithoutCustomer.getState(), "state of order changed to delivered");	}	@Test	public void testKitchenWithOrderConfirmedWithoutCustomer() {		String test;		myOrder.setState("confirmed");		test = services[0].startService(myOrder);		assertTrue(test.contains("Order is ready"), "Kitchen: Order is ready.");		assertEquals("ready", myOrder.getState(), "state of order changed to ready");	}	@Test	public void testDeliveryWithoutOrder() {		String test;		test = services[1].startService(null);		assertTrue(test.contains("No order available."), "Delivery: No order available.");		assertEquals("started", myOrder.getState(), "state of order remains started");	}	@Test	public void testDeliveryWithOrderStartedWithoutCustomer() {		String test;		String state = myOrderWithoutCustomer.getState();		test = services[1].startService(myOrderWithoutCustomer);		assertTrue(test.contains("No customer available."), "Delivery: No customer available.");		assertEquals(state, myOrderWithoutCustomer.getState(), "state of order remains started");	}	@Test	public void testDeliveryWithOrderConfirmedWithoutCustomer() {		String test;		myOrderWithoutCustomer.setState("confirmed");		test = services[1].startService(myOrderWithoutCustomer);		assertTrue(test.contains("No customer available."), "Delivery: No customer available.");		assertEquals("confirmed", myOrderWithoutCustomer.getState(), "state of order remains confirmed");	}	@Test	public void testDeliveryWithOrderConfirmedWithCustomer() {		String test;		myOrder.setState("confirmed");		test = services[1].startService(myOrder);		assertTrue(test.contains("No order is ready for processing."), "Delivery: No order is ready for processing.");		assertEquals("confirmed", myOrder.getState(), "state of order remains confirmed");	}	@Test	public void testDeliveryEmployees() {		EmployeeVO employees[];		employees = ((Delivery) services[1]).getEmployees();		assertTrue(employees.length >= 2, "At least 2 employees");		assertNotNull(employees[0], "Employee objects in arrray");		assertNotNull(employees[1], "Employee objects in arrray");	}	@Test	public void testDeliverySelectEmployeeIsPrivate() throws NoSuchMethodException {		myDeliveryClass = Delivery.class;		selectEmployee = myDeliveryClass.getDeclaredMethod("selectEmployee");		modifiersSelectEmployee = selectEmployee.getModifiers();		assertTrue(Modifier.isPrivate(modifiersSelectEmployee), "Methode selectEmployee of Delivery is private");	}	@Test	public void testDeliverySelectEmployee() throws NoSuchMethodException {		EmployeeVO employee;		myDeliveryClass = Delivery.class;		selectEmployee = myDeliveryClass.getDeclaredMethod("selectEmployee");		modifiersSelectEmployee = selectEmployee.getModifiers();		employee = (EmployeeVO) ReflectionSupport.invokeMethod(selectEmployee, (Delivery) services[1]);		assertNotNull(employee, "Employee objects of Delivery are selected");	}}