import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;import java.awt.Color;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;/** * The methods of the class ChefVO are tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 3.0 04.02.2019 */public class JUnitTestChefVO {	private static ChefVO chefX, chefY, chefZ;	@BeforeEach	public void initEach(){				chefX = new  ChefVO("Nachname", "Vorname",Color.WHITE);		chefY = new  ChefVO(chefX.getLastName(), chefX.getFirstName(),chefX.getColorApron());		chefZ = new  ChefVO(chefX.getLastName(), chefX.getFirstName(),chefX.getColorApron());	}		@Test	public void equalsInChefVO() {						//For any non-null reference value x, x.equals(null) should return false. 		assertFalse(chefX.equals(null),"For any non-null reference value x, x.equals(null) should return false.");						//Two Objects		assertTrue(chefY.getClass() + " creates new objects using the initializing constructor", chefY != chefX);				//It is reflexive: for any non-null reference value x, x.equals(x) should return true. 		assertTrue(chefY.equals(chefY),"It is reflexive: for any non-null reference value x, x.equals(x) should return true. ");				//It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.  		assertTrue(chefX.equals(chefY) == chefY.equals(chefX),"It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. ");					//It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.   		assertTrue((chefX.equals(chefY) && chefY.equals(chefZ)) ? chefX.equals(chefZ): false,"It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. ");					//Equals		assertTrue(chefY.equals(chefX),chefY.getClass() + " equals is correct when using similar objects ");				assertTrue(chefY.equals(chefY),chefY.getClass() + " equals is correct when using identical objects ");				chefZ.setLastName("Anders");		assertFalse(chefZ.equals(chefX),chefZ.getClass() + " equals is correct when using diffenrent objects of the same class");				assertFalse(chefZ.equals(new PizzaVO()),chefZ.getClass() + " equals is correct when using wrong objects (No-" + chefZ.getClass() + " correct " );	}		@Test	public void equalsHashCodeInChefVO() {				//Simliar objects provide similar hashcode		assertTrue(chefX.equals(chefY) == ( chefX.hashCode() == chefY.hashCode()),"Simliar objects provide similar hashcode");		}}